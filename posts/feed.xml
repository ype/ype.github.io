<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://isoty.pe/</id>
  <title>ype</title>
  <updated>2014-01-22T00:00:00Z</updated>
  <link rel="alternate" href="http://isoty.pe/"/>
  <link rel="self" href="http://isoty.pe/posts/feed.xml"/>
  <author>
    <name>anton strilchuk</name>
    <uri>http://isoty.pe</uri>
  </author>
  <entry>
    <id>tag:isoty.pe,2014-01-22:/projects/from-arduino-to-arm/2014-01-21-stm-dev-notes.html</id>
    <title type="html">STM32 Development: Intro</title>
    <published>2014-01-22T00:00:00Z</published>
    <updated>2014-01-22T00:00:00Z</updated>
    <link rel="alternate" href="http://isoty.pe/projects/from-arduino-to-arm/2014-01-21-stm-dev-notes.html"/>
    <content type="html">&lt;p&gt;This article will go through the required steps to setup an
  environment for writing, programming, and debugging code for ARM
  Cortex-M processor. As I am predominately a OS X user (sometimes Linux
  depending on my mood) the information provided is tailored towards OS
  X users, however, as all of the tools used in the setup are
  open-source, the information should be transferable to other
  platforms.&lt;/p&gt;
&lt;div class="section" id="setup"&gt;
&lt;h1&gt;Setup&lt;/h1&gt;
&lt;div class="section" id="parts-list"&gt;
&lt;h3&gt;Parts List&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://uk.farnell.com/stmicroelectronics/stm32vldiscovery/stm32f100-st-link-discovery-kit/dp/1824325"&gt;ST STM32VL-DISCOVERY board&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;or any other ARM Cortex-M Processor, however most of the examples
    shown will be for the STM32VL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://uk.farnell.com/jsp/search/productdetail.jsp?SKU=1892523"&gt;ST-Link/v2&lt;/a&gt; (or other compatible ICD/Programmer, for STM32)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NOTE: If you have the STM32VL-Discovery board, there is an
    ST-Link built-in, and it is not required to get an external
    ST-Link, however if you plan on developing custom projects built
    around the ST range of microcontrollers it may be worth to get
    one.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;You will also need:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wires, LED and other components you may want to play around with,
    note that for each example I will list the parts used with links to
    where you can get them.&lt;/li&gt;
  &lt;li&gt;A computer, but given you are reading this I am going to assume you
    have one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="toolchain"&gt;
&lt;h3&gt;Toolchain&lt;/h3&gt;
&lt;div class="section" id="homebrew-installation"&gt;
&lt;h5&gt;Homebrew installation&lt;/h5&gt;
&lt;p&gt;To manage packages on my mac (OS X 10.9), I use homebrew, so I will
  show you how to set that up, however if you are on Linux, or prefer a
  different package manager (i.e. macports), most of these packages
  should be available. You can also alternatively install all of these
  packages manually, though I would advise against it, as in my
  experience it can be a road riddled with bugs.&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration:underline;"&gt;Homebrew install&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ruby -e &lt;span class="s2"&gt;"$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"&lt;/span&gt;    
&lt;span class="nv"&gt;$ &lt;/span&gt;brew doctor
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gcc-arm-none-eabi-install"&gt;
&lt;h5&gt;gcc-arm-none-eabi install&lt;/h5&gt;
&lt;p&gt;You are going to need a compiler to generate your object code that
  will be loaded onto your microcontroller. To do this you are going to
  need a toolchain. The GNU toolchain for ARM Cortex-M and Cortex-R
  processors is really great, and can be easily installed using
  homebrew.&lt;/p&gt;
&lt;p&gt;(Note: you can use an IDE for ARM development, however the examples
  and instructions here are built around the GNU ARM toolchain. Further,
  if you are developing on OS X or Linux IDE support for ARM development
  is limited with most being built specifically for Windows)&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration:underline;"&gt;Installing the GNU Toolchain with Homebrew&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew install https://raw.github.com/PX4/homebrew-px4/master/gcc-arm-none-eabi-47.rb    
&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="st-link"&gt;
&lt;h3&gt;ST-LINK&lt;/h3&gt;
&lt;p&gt;The ST-Link (or compatible ICD/Programmer) is essential for ARM
  microcontroller development. It is an in-circuit debugger and
  programmer for the STM8 and STM32 microntroller families.&lt;/p&gt;
&lt;div class="section" id="installing-st-link-utils-using-homebrew"&gt;
&lt;h5&gt;Installing ST-Link Utils using Homebrew&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew install automake autoconf libusb libusb-compat    
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo easy_install pyyaml
&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir ~/Development 
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Development
&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir ~/Development/embedded
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Development/embedded
&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir ~/Development/embedded/tools
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Development/embedded/tools
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/texane/stlink.git    
&lt;span class="c"&gt;#ST-LINK command line utility&lt;/span&gt;
&lt;span class="c"&gt;#Source: https://github.com/texane/stlink&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Development/embedded/tools/stlink/    
&lt;span class="nv"&gt;$ &lt;/span&gt;./autogen.sh
&lt;span class="nv"&gt;$ &lt;/span&gt;./configure
&lt;span class="nv"&gt;$ &lt;/span&gt;make 
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="extra-configurations-for-st-link-v1"&gt;
&lt;h5&gt;Extra Configurations for ST-Link/v1&lt;/h5&gt;
&lt;p&gt;The ST-Link/v1’s SCSI emulation is very broken, You will need to tell
  your operating system to ignore the ST-Link/v1, as the SCSI emulation
  on it doesn’t play nice with UNIX systems.&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration:underline;"&gt;Do one of the following before using your ST-Link&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Option 1:&lt;/b&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;modprobe -r usb-storage
&lt;span class="nv"&gt;$ &lt;/span&gt;modprobe usb-storage &lt;span class="nv"&gt;quirks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;483:3744:i    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;b&gt;Option 2:&lt;/b&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#add "options usb-storage quirks=483:3744:i" to /etc/modprobe.conf    &lt;/span&gt;
&lt;span class="c"&gt;#then&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;modprobe -r usb-storage
&lt;span class="nv"&gt;$ &lt;/span&gt;modprobe usb-storage
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;b&gt;Option 3:&lt;/b&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cp stlink_v1.modprobe.conf /etc/modprobe.d     
&lt;span class="c"&gt;#then&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;modprobe -r usb-storage 
&lt;span class="nv"&gt;$ &lt;/span&gt;modprobe usb-storage
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="notes-for-st-link-v2"&gt;
&lt;h5&gt;Notes for  ST-Link/v2&lt;/h5&gt;
&lt;p&gt;The ST-Link/v2 should work right away, nevertheless, doing the above
  fix for STLINKv1 won’t hurt anything and will prevent you from having
  to do the work later if you are using an ST-Link/v1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-st-util"&gt;
&lt;h5&gt;Using ST-Util&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;You must launch st-util with “-1” flag &lt;a href="https://github.com/texane/stlink/issues/182"&gt;(source)&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;/path_to_stlink/st-utils -1
&lt;span class="c"&gt;#or if you have added the stlink folder to your path&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;st-utils -1
&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="section" id="setting-up-a-development-environment-for-stm32-projects"&gt;
&lt;h1&gt;Setting up a Development Environment for STM32 Projects&lt;/h1&gt;
&lt;div class="section" id="option-1-firmware-lib-simple"&gt;
&lt;h3&gt;Option 1, Firmware Lib =&amp;gt; Simple&lt;/h3&gt;
&lt;div class="section" id="libopencm3"&gt;
&lt;h5&gt;libopencm3&lt;/h5&gt;
&lt;p&gt;The libopencm3 project is a good place to start with ST
  programming. Featuring a large free/libre/open-source (LGPL v3, or
  later) firmware library for various ARM Cortex-M3 microcontrollers,
  including the ST STM32 range, libopencm3 offers examples, community
  and documentation to help for a smooth transition from Arduino to ARM.&lt;/p&gt;
&lt;p&gt;To get more familiar with libopencm3 go to there main wiki @
  &lt;a href="http://libopencm3.org/wiki/Main_Page"&gt;http://libopencm3.org/wiki/Main_Page&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="libopencm3-quick-start"&gt;
&lt;h5&gt;libopencm3 quick start&lt;/h5&gt;
&lt;p&gt;The code below will help you to setup a workflow to develop for ARM
  Cortex-M microcontrollers using the resources available from
  libopencm3.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Development/embedded/
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/libopencm3/libopencm3-examples.git        
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;libopencm3-examples
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule init
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule update
&lt;span class="nv"&gt;$ &lt;/span&gt;make
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style="text-decoration:underline;"&gt;Test to see everything works&lt;/span&gt;
  (Note: The Example below is for the &lt;a href="http://www.st.com/st-web-ui/static/active/en/resource/technical/document/user_manual/CD00267113.pdf"&gt;ST STM32VL-DISCOVERY board&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;examples/stm32/f1/stm32vl-discovery/miniblink/    
&lt;span class="nv"&gt;$ &lt;/span&gt;make
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Development/embedded/tools/stlink/    
&lt;span class="nv"&gt;$ &lt;/span&gt;./st-util
&lt;span class="c"&gt;#Short way&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;arm-none-eabi-gdb miniblink.elf -ex &lt;span class="s2"&gt;"tar ext :4242"&lt;/span&gt;    
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; load
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="option-2-bare-metal-fiddly"&gt;
&lt;h3&gt;Option 2, Bare Metal =&amp;gt; Fiddly&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;(Coming Soonish)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="section" id="helpful-resources"&gt;
&lt;h1&gt;Helpful resources&lt;/h1&gt;
&lt;p&gt;Here is a list of helpful links to tutorials and information to get
  you started on the path to development using ARM microcontrollers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;STM32 Open Source Course&lt;/b&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href="http://homes.soic.indiana.edu/geobrown/c335.php"&gt;Course Page&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://github.com/geoffreymbrown/STM32-Template"&gt;Build template for projects using the STM32VL-Discovery Board&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Book
        &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cs.indiana.edu/~geobrown/book.pdf"&gt;Discovering the STM32 Microcontroller&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
&lt;/li&gt;
    &lt;/ul&gt;
&lt;/li&gt;
  &lt;li&gt;
&lt;b&gt;libopencm3&lt;/b&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href="http://libopencm3.org/wiki/Main_Page"&gt;Wiki - Main Project Page&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://github.com/libopencm3/libopencm3"&gt;github/libopencm3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://github.com/libopencm3/libopencm3-examples"&gt;github/libopencm3-examples&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="http://libopencm3.github.io/docs/latest/stm32f1/html/modules.html"&gt;libopencm3 API Documentation&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/li&gt;
  &lt;li&gt;
&lt;b&gt;Reference Manuals&lt;/b&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href="http://infocenter.arm.com/help/topic/com.arm.doc.ddi0337h/DDI0337H_cortex_m3_r2p0_trm.pdf"&gt;Cortex-M3 Reference Manual&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="http://www.st.com/web/en/resource/technical/document/reference_manual/CD00171190.pdf"&gt;RM0008: STM32F1xx&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="http://www.st.com/web/en/resource/technical/document/reference_manual/CD00246267.pdf"&gt;RM0041: STM32F100xx&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <id>tag:isoty.pe,2013-11-08:/posts/2013-11-08-problematic-procrastination/</id>
    <title type="html">Problematic Procrastination</title>
    <published>2013-11-08T00:00:00Z</published>
    <updated>2013-11-08T00:00:00Z</updated>
    <link rel="alternate" href="http://isoty.pe/posts/2013-11-08-problematic-procrastination/"/>
    <content type="html">&lt;div class="section" id="why-you-suck"&gt;
&lt;h1&gt;Why you suck&lt;/h1&gt;
&lt;p&gt;It never ceases to amaze me how long I can procrastinate before
  actually deciding to get shit done. It would maybe be not as troubling
  if I hated what I do on a daily basis, or the work that I had to get
  done was mind numbing dull, but it’s unfortunately not (I saw
  unfortunately because then I would have an excuse as to why I’m a lazy
  sod).&lt;/p&gt;
&lt;div class="section" id="brief-notes-on-a-day"&gt;
&lt;h3&gt;Brief notes on a day&lt;/h3&gt;
&lt;p&gt;I would like to say I wake up energised and rearing to go, but like
  most, I wake in a fog, dragging my sulking ass out of bed, trying
  desperately to summon some celestial force to help me muster the focus
  to stay on track with tasks I need to get done. Side note: Freelance
  is the procrastinators worst nightmare (although I have found many a
  way to procrastinate in a normal work environment as well, see also:
  reverse toilet sleeping)&lt;/p&gt;
&lt;p&gt;After raking large amounts of crust from my tired eyes I start my
  already behind day with a cup of tea and a wonderfully delicious
  cigarette (if you don’t smoke you should try it, really it’s a lot of
  fun (no sarcasm, just pure smoking love))&lt;/p&gt;
&lt;p&gt;Smoking and tea drinking over, I either turn on some stupid cartoon on
  one of a handful of streaming TV websites and proceed to say at the
  end of every episode “after this one I’ll get to work” - this has
  become problematic to the point that I downloaded an app to block
  specific sites (unfortunately I never turn this app on).&lt;/p&gt;
&lt;p&gt;Once TV show watching has been completed I continue doing absolutely
  useless, time wasting activities - one of my favourite being the
  aimless pursuit of customising Emacs to the point of insanity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-emacs-curse"&gt;
&lt;h3&gt;The Emacs Curse&lt;/h3&gt;
&lt;p&gt;I believe Richard Stallman whilst designing Emacs, deviously devised
  to create a piece of shit, almost text editor, time vampire that was
  more addictive then Facebook or all its other time sucking
  compadres.&lt;/p&gt;
&lt;p&gt;Half serial time killer, half insane genius, Stallman created the bane
  of my existence, as for some reason I feel as though changing my
  dotemacs file is somehow kind of like doing actual work - this is not
  the case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-calm-after-the-storm"&gt;
&lt;h3&gt;The calm after the storm&lt;/h3&gt;
&lt;p&gt;With the drudge through the wasteland that is my morning over, actual
  money making, cash flowing work can begin - this usually means
  possibly taking a shower and then eating food so that around 3pm I can
  start sewing, soldering, or hacking some slapped together, haphazardly
  made project together.&lt;/p&gt;
&lt;p&gt;All in all work does get done and deadlines are hit, but oh how I
  crave the day when this process is mitigated down to a streamline
  flow making a 40 hour work week possibly possible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="section" id="in-ardently-needed-conclusion"&gt;
&lt;h1&gt;In (ardently needed) conclusion&lt;/h1&gt;
&lt;p&gt;It’s a love hate thing in my opinion - procrastination is beautiful -
  almost wonderful to say the least - the unfortunate part is that
  ignorance does not exist, making it virtually impossible to forget the
  fact that if all the chaff could be removed, I might actually build
  something useful for myself, and possibly others.&lt;/p&gt;
&lt;p&gt;Another 20 minutes down the drain writing this god forsaken pile of
  empty words - I really hope you didn’t read to the end of this - if so
  go to some work, or find a better blog to read.&lt;/p&gt;
&lt;p&gt;I like turtles.&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <id>tag:isoty.pe,2013-11-04:/posts/2013-11-04-virtually-a-new-beginning/</id>
    <title type="html">virtually, a new beginning</title>
    <published>2013-11-04T00:00:00Z</published>
    <updated>2013-11-04T00:00:00Z</updated>
    <link rel="alternate" href="http://isoty.pe/posts/2013-11-04-virtually-a-new-beginning/"/>
    <content type="html">&lt;div class="section" id="a-brief-hello"&gt;
&lt;h1&gt;A brief hello&lt;/h1&gt;
&lt;p&gt;I decided, one fateful day (or maybe not so fateful, but rather
  ill-conceived) - that it would be a good idea to blog using orgmode. I
  use orgmode for many things - scheduling, expenses, charts of varying
  kind, time-tracking, the list goes on. Blogging in org seemed like a
  natural extension of this already ill-fated, ill-conceived, awesomely
  nerd trapped system I have developed for myself.&lt;/p&gt;
&lt;div class="section" id="how-it-all-came-together"&gt;
&lt;h3&gt;How it all came together&lt;/h3&gt;
&lt;p&gt;This blog uses a combination of a few tools that have become very dear
  to me - the aforementioned orgmode, ispell (because I’m using friggin
  emacs to write all this drivel), a ruby static site generator - nanoc,
  and some hacked together bits of code (one of which is org-ruby, I’ll
  explain this one in detail at a later time - there is a surprisingly
  limited amount of documentation on how to use it effectively)&lt;/p&gt;
&lt;p&gt;All of this heaping junk pile of snippets has come together in
  isoty.pe - my effort to help clog the stinking drain that the Internet
  has become (don’t get me wrong I spend a good majority of my time in
  this cesspool of delights).&lt;/p&gt;
&lt;div class="section" id="in-very-needed-conclusion"&gt;
&lt;h2&gt;In [very needed] Conclusion&lt;/h2&gt;
&lt;p&gt;I feel I should warn, alert, tell you what you will encounter on this
  site - don’t be afraid, it’s not a NSFW warning (it could be a little
  though I guess, as your boss probably would not enjoy you wasting
  endless hours looking at pointless pictures of pandas) - the site is
  my endless hacking, tweaking, replace-stringing of the various tools I
  use on a daily basis to GSD (for the GTD crowd GSD is my version where
  I replace the David Allen acronym “Get Things Down” with the more
  work appropriate “Get Shit Done”)&lt;/p&gt;
&lt;p&gt;I hope you enjoy this journey to the deep, bon voyage to sanity, this
  different, but hopefully better foray into Internet cesspiting.&lt;/p&gt;
&lt;p&gt;y_pe&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
</feed>

